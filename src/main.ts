import 'source-map-support/register'; //This import must remain on the first line
//Rest of app the imports
import { INestApplication, RequestMethod, ValidationPipe } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { NestFactory } from '@nestjs/core';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import compression from 'compression';
import expressBasicAuth from 'express-basic-auth';
import helmet from 'helmet';
import { AppModule } from './app.module';
import * as dotenv from 'dotenv';
dotenv.config();
dotenv.config({
  path: `.env.${process.env.NODE_ENV}`,
});

function setupSwagger(app: INestApplication, configService: ConfigService) {
  const options = new DocumentBuilder()
    .setTitle('NestJS Boilerplate')
    .setVersion('0.1.0')
    .addSecurity('BearerAuthorization', {
      type: 'apiKey',
      in: 'header',
      name: 'Authorization',
      description: "Access token format: 'Bearer <access-token>'",
    })
    .build();

  const document = SwaggerModule.createDocument(app, options);

  const authenticatedSwaggerUIUsers = configService.get('swagger.authUsers');
  const swaggerUIPath = configService.get('swagger.uiPath');
  //here /api-json is the default path of json generated by swagger
  app.use(
    [swaggerUIPath, '/api-json'],
    expressBasicAuth({
      challenge: true,
      users: authenticatedSwaggerUIUsers,
    }),
  );

  SwaggerModule.setup(swaggerUIPath, app, document);
}

async function bootstrap() {
  const app = await NestFactory.create(AppModule, {});

  app.enableCors();
  app.use(helmet());
  const configService = app.get(ConfigService);

  app.setGlobalPrefix(configService.get('contextPath'), { exclude: [{ path: 'health', method: RequestMethod.GET }] });

  if (configService.get('swagger.isEnabled')) {
    setupSwagger(app, configService);
  }

  app.useGlobalPipes(new ValidationPipe());

  app.use(compression());

  await app.listen(configService.get('PORT'));
}

void bootstrap();
